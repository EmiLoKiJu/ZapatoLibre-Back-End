{
	"info": {
		"_postman_id": "8364aaa0-ce8f-4622-b825-27a80a2edb1a",
		"name": "Testing orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27610988"
	},
	"item": [
		{
			"name": "Login with newUser2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a token\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.accessToken).to.exist;\r",
							"    pm.expect(jsonData.accessToken).to.be.a('string');\r",
							"    var Token = jsonData.accessToken;\r",
							"    pm.environment.set(\"Token\", Token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\":\"new2@email.com\",\r\n  \"password\":\"asddsa123321\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "create product 35-40",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains an object\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData._id).to.exist;\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var id = jsonData._id;\r",
							"pm.environment.set(\"productCreated1\", id);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\": \"Zapatilla Northstar 35-40 para uso diario\",\r\n        \"price\": 19.9,\r\n        \"brand\": \"Northstar\",\r\n        \"purpose\": \"Walking\",\r\n        \"stock\": [\r\n            {\r\n                \"size\": \"35\",\r\n                \"quantity\": 2\r\n            },\r\n            {\r\n                \"size\": \"36\",\r\n                \"quantity\": 3\r\n            },\r\n            {\r\n                \"size\": \"37\",\r\n                \"quantity\": 1\r\n            },\r\n            {\r\n                \"size\": \"38\",\r\n                \"quantity\": 1\r\n            },\r\n            {\r\n                \"size\": \"39\",\r\n                \"quantity\": 5\r\n            },\r\n            {\r\n                \"size\": \"40\",\r\n                \"quantity\": 5\r\n            }\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "create product 30-33",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains an object\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData._id).to.exist;\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var id = jsonData._id;\r",
							"pm.environment.set(\"productCreated2\", id);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"name\": \"Zapatilla Northstar 30-33 para uso diario\",\r\n        \"price\": 9.9,\r\n        \"brand\": \"Northstar\",\r\n        \"purpose\": \"Walking\",\r\n        \"stock\": [\r\n            {\r\n                \"size\": \"30\",\r\n                \"quantity\": 2\r\n            },\r\n            {\r\n                \"size\": \"31\",\r\n                \"quantity\": 3\r\n            },\r\n            {\r\n                \"size\": \"32\",\r\n                \"quantity\": 5\r\n            },\r\n            {\r\n                \"size\": \"33\",\r\n                \"quantity\": 3\r\n            }\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 products owner buys own products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql('You can not buy your own products');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"35\",\r\n            \"quantity\":1\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with gabriel rozas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a token\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.accessToken).to.exist;\r",
							"    pm.expect(jsonData.accessToken).to.be.a('string');\r",
							"    var Token = jsonData.accessToken;\r",
							"    pm.environment.set(\"Token2\", Token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\":\"gabrielrozas1996@gmail.com\",\r\n  \"password\":\"asddsa123321\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 no products data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 no body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 401 no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Unauthorized');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 products doesnt have stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql(\"No valid size\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"29\",\r\n            \"quantity\":1\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 products doesnt have quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql(\"Insufficient quantity of products\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"35\",\r\n            \"quantity\":10\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":10\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 products not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Validation Failed');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"35\",\r\n            \"quantity\":1\r\n        },\r\n        {\r\n            \"id\":\"99558621\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 no valid type of id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql('Some data is missing or is corrupted.');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":true,\r\n            \"size\":\"35\",\r\n            \"quantity\":1\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 no valid type of size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql('Some data is missing or is corrupted.');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":35,\r\n            \"quantity\":1\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 no valid type of quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql('Some data is missing or is corrupted.');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"35\",\r\n            \"quantity\":\"1\"\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 quantity number equal 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql('Some data is missing or is corrupted.');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"35\",\r\n            \"quantity\":0\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 400 quantity number has decimal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Bad Request');\r",
							"    pm.expect(jsonData.message).to.eql('Some data is missing or is corrupted.');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"35\",\r\n            \"quantity\":0.5\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "create order 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.orderItems).to.exist;\r",
							"    pm.expect(jsonData.completed).to.eql(false);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var id = jsonData._id;\r",
							"pm.environment.set(\"orderCreated\", id);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products_data\": [\r\n        {\r\n            \"id\":\"{{productCreated1}}\",\r\n            \"size\":\"35\",\r\n            \"quantity\":1\r\n        },\r\n        {\r\n            \"id\":\"{{productCreated2}}\",\r\n            \"size\":\"30\",\r\n            \"quantity\":1\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check user data to confirm order id pushed in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the user with orders array\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.username).to.eql('Gabo');\r",
							"    pm.expect(jsonData.orders).to.contain(pm.environment.get(\"orderCreated\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/users/current",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"users",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if the product1 has less quantity updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains an empty array\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData.stock[0].quantity).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"productCreated1\");\r",
							"pm.request.url = 'http://localhost:5173/api/products/' + savedID;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/products/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Check if the product2 has less quantity updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains an empty array\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData.stock[0].quantity).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"productCreated2\");\r",
							"pm.request.url = 'http://localhost:5173/api/products/' + savedID;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"productCreated1\");\r",
							"pm.request.url = 'http://localhost:5173/api/products/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the object deleted\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"productCreated1\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"productCreated2\");\r",
							"pm.request.url = 'http://localhost:5173/api/products/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the object deleted\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"productCreated2\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check user data to confirm products are taken out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the user with orders array\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.username).to.eql('newUsername2');\r",
							"    pm.expect(jsonData.products).to.not.include(pm.environment.get(\"productCreated1\"));\r",
							"    pm.expect(jsonData.products).to.not.include(pm.environment.get(\"productCreated2\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/users/current",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"users",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Complete order 401 no token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"orderCreated\");\r",
							"pm.request.url = 'http://localhost:5173/api/order/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Unauthorized');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Complete order 401 wrong user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"orderCreated\");\r",
							"pm.request.url = 'http://localhost:5173/api/order/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Unauthorized');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Complete order 404 wrong id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.url = 'http://localhost:5173/api/order/' + 1313;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the object updated\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Validation Failed');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Complete order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"orderCreated\");\r",
							"pm.request.url = 'http://localhost:5173/api/order/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the order completed\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"orderCreated\"));\r",
							"    pm.expect(jsonData.completed).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 401 no token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"orderCreated\");\r",
							"pm.request.url = 'http://localhost:5173/api/order/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Unauthorized');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 401 wrong user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"orderCreated\");\r",
							"pm.request.url = 'http://localhost:5173/api/order/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains bad request\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Unauthorized');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order 404 wrong id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.url = 'http://localhost:5173/api/order/' + 50678;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the object updated\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.title).to.eql('Validation Failed');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var savedID = pm.environment.get(\"orderCreated\");\r",
							"pm.request.url = 'http://localhost:5173/api/order/' + savedID;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the object deleted\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"orderCreated\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check user data to confirm order is taken out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the user with orders array\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.a('object');\r",
							"    pm.expect(jsonData.username).to.eql('Gabo');\r",
							"    pm.expect(jsonData.orders).to.not.include(pm.environment.get(\"orderCreated\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5173/api/users/current",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"users",
						"current"
					]
				}
			},
			"response": []
		}
	]
}